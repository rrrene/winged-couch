window.WingedCouch or= {}

class WingedCouch.Model
  constructor: (data) ->
    for k, v of data
      @[k] = v

  @from: (data) ->
    new @(data)

  @find: (id) ->
    deferred = $.Deferred()

    WingedCouch.Server.
      get("/#{@dbName}/#{id}").
      done(@findCallback deferred).
      fail(@findErrback deferred)

    deferred

  @build: (modelName, dbName) ->
    model = class extends WingedCouch.Model
    model.dbName = dbName
    window[modelName] = model
    <%= "console.log('Created model', modelName)" if Rails.env.development? %>
    true

  @findCallback: (deferred) ->
    (data) =>
      record = @from(data)
      deferred.resolve(record)

  @findErrback: (deferred) ->
    ->
      deferred.reject()

  @view: (view_name) ->
    new WingedCouch.View(this, view_name)